import tkinter as tk
from tkinter import ttk, Menu, messagebox, filedialog
import os
from datetime import datetime

class MusicCollectionUI:
    def __init__(self, root, library, player):
        self.root = root
        self.library = library
        self.player = player
        self._setup_ui()

    def _setup_ui(self):
        self.root.title("–¢–≤–æ—è –ú—É–∑—ã–∫–∞")
        self.root.geometry("1000x700")

        # Header
        header_frame = tk.Frame(self.root, bg="#f0f0f0", padx=10, pady=10)
        header_frame.pack(fill=tk.X)
        tk.Label(header_frame, text="–¢–í–û–Ø –ú–£–ó–´–ö–ê",
                font=('Arial', 14, 'bold'), bg="#f0f0f0").pack(side=tk.LEFT)

        # Toolbar with buttons
        toolbar = tk.Frame(self.root, padx=5, pady=5)
        toolbar.pack(fill=tk.X)

        # –ö–Ω–æ–ø–∫–∏ (—É–¥–∞–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞)
        buttons = [
            ("üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É", self._scan_folder),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self._save_collection)
        ]

        for text, cmd in buttons:
            btn = tk.Button(toolbar, text=text, command=cmd, bd=1, relief=tk.RIDGE, padx=10)
            btn.pack(side=tk.LEFT, padx=10)

        # # Treeview –≤–µ—Ä—Å–∏—é —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        tree_frame = tk.Frame(self.root)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        self.tree = ttk.Treeview(tree_frame, columns=("name", "path", "size", "date"), show="headings")
        self.tree.tag_configure("folder", background="#f0f0f0", font=('Arial', 10, 'bold'))# —Ñ–æ–Ω –ø–∞–ø–æ–∫
        self.tree.tag_configure("file", background="white")# —Ñ–æ–Ω —Ñ–∞–π–ª–æ–≤

        scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.tree.pack(fill=tk.BOTH, expand=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏, anchor - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (n - –ø—Ä–∞–≤–æ, w - –ª–µ–≤–æ, n - –≤–µ—Ä—Ö, s - –Ω–∏–∑)
        self.tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ", anchor=tk.CENTER)
        self.tree.heading("path", text="–ü—É—Ç—å", anchor=tk.SW)
        self.tree.heading("size", text="–†–∞–∑–º–µ—Ä", anchor=tk.W)
        self.tree.heading("date", text="–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", anchor=tk.W)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–ª–æ–Ω–æ–∫, width - —à–∏—Ä–∏–Ω–∞, tk.NO - –∑–∞–ø—Ä–µ—Ç —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è, anchor - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        self.tree.column("name", width=200, stretch=tk.YES)
        self.tree.column("path", width=300, stretch=tk.YES)
        self.tree.column("size", width=100, stretch=tk.YES)
        self.tree.column("date", width=150, stretch=tk.YES)

        # –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in ("name", "path", "size", "date"):
            self.tree.heading(col, command=lambda _col=col: self._treeview_sort_column(_col, False))

        # Player controls frame
        player_frame = tk.Frame(self.root, bg="#e0e0e0", padx=10, pady=8)
        player_frame.pack(fill=tk.X)

        # Player buttons
        player_buttons = [
            ("‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", lambda: self.player.play_selected(self.tree)),
            ("‚èè –í –ø–ª–µ–π–ª–∏—Å—Ç", lambda: self.player.add_to_playlist(self.tree)),
            ("‚èπ –°—Ç–æ–ø", self.player.stop_foobar)
        ]

        for text, cmd in player_buttons:
            btn = tk.Button(player_frame, text=text, command=cmd, bg="#f8f8f8", padx=10)
            btn.pack(side=tk.LEFT, padx=5)

        # Status bar
        self.status_bar = tk.Label(player_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                                 bg="#e0e0e0", fg="#333333", anchor=tk.W)
        self.status_bar.pack(side=tk.LEFT, padx=10, expand=True, fill=tk.X)

        # Context menu
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", command=lambda: self.player.play_selected(self.tree))
        self.context_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç", command=lambda: self.player.add_to_playlist(self.tree))
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ", command=self._open_in_explorer)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self._delete_item)

        # Bindings
        self.tree.bind("<Button-3>", self.show_context_menu)
        self.tree.bind("<Double-1>", lambda e: self.player.play_selected(self.tree))

    def _treeview_sort_column(self, col, reverse):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        items = [(self.tree.set(k, col), k) for k in self.tree.get_children("")]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        items.sort(reverse=reverse)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for index, (val, k) in enumerate(items):
            self.tree.move(k, "", index)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞
        self.tree.heading(col, command=lambda: self._treeview_sort_column(col, not reverse))

    def _scan_folder(self):
        folder_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º—É–∑—ã–∫–æ–π")
        if folder_path:
            if self.library.scan_folder(folder_path):
                self.update_tree_view(self.library.get_library())
                self.update_status(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {folder_path}", "green")

    def _save_collection(self):
        success, result = self.library.save_to_docx()
        if success:
            self.update_status(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result}", "green")
        else:
            self.update_status(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result}", "red")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é:\n{result}")

    def _open_in_explorer(self):
        selected = self.tree.focus()
        if not selected:
            return

        item_data = self.tree.item(selected)
        if item_data["values"][0] == "file":
            path = os.path.dirname(item_data["values"][1])
        else:
            path = self._find_folder_path(selected)

        if path and os.path.exists(path):
            os.startfile(path)

    def _delete_item(self):
        selected_items = self.tree.selection()
        if not selected_items:
            return

        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å {len(selected_items)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?"
        )
        if confirm:
            for item in selected_items:
                self._delete_item_recursive(item)
            self.update_tree_view(self.library.get_library())
            self.update_status(f"–£–¥–∞–ª–µ–Ω–æ {len(selected_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", "orange")

    def _delete_item_recursive(self, item):
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥–µ—Ä–µ–≤–∞
        pass

    def _find_folder_path(self, folder_item):
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ
        pass

    def update_tree_view(self, library):
        self.tree.delete(*self.tree.get_children())
        self._build_tree_recursive("", library)

    def _build_tree_recursive(self, parent_id, node):
        for name, content in node.items():
            if name == "_files":
                for file_name, file_path in content:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    file_stats = os.stat(file_path)
                    size = f"{file_stats.st_size / 1024:.1f} KB"
                    date = datetime.fromtimestamp(file_stats.st_mtime).strftime('%Y-%m-%d %H:%M')

                    self.tree.insert(
                        parent_id, "end",
                        values=(file_name, file_path, size, date),
                        tags=("file",)
                    )
            else:
                folder_id = self.tree.insert(
                    parent_id, "end",
                    text=name,
                    values=(name, "", "", ""),
                    tags=("folder",)
                )
                self._build_tree_recursive(folder_id, content)

    def show_context_menu(self, event):
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)

    def update_status(self, text, color="black"):
        self.status_bar.config(text=text, fg=color)