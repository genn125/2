import tkinter as tk
from tkinter import ttk, Menu, messagebox, filedialog
import os
from datetime import datetime
from tkinter.constants import RIGHT


class MusicCollectionUI:
    def __init__(self, root, library, player):
        self.root = root
        self.library = library
        self.player = player
        self._setup_ui()

    def _setup_ui(self):
        self.root.title("–¢–≤–æ–∏ —Ñ–∞–π–ª—ã")
        self.root.geometry("1200x600")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–§—Ä–µ–π–º) —Å (–ì–õ–ê–í–ù–ê–Ø –•–†–ï–ù–¨, –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –í–°–ï–ì–û –¢–ï–ö–°–¢–ê –°–í–ï–†–•–£)
        header_frame = tk.Frame(self.root, bg="#FFFFE0", padx=10, pady=0)  # —Ü–≤–µ—Ç –ø–æ–¥–ª–æ–∂–∫–∏ —Å–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
        header_frame.pack(fill=tk.X)

        # –ú–µ—Ç–∫–∞ "–ü–û–ò–°–ö:" –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        search_label = tk.Label(
            header_frame,
            text="–ü–û–ò–°–ö:",
            font=('Arial', 10, 'bold underline'),
            bg="#FFFFE0" # —Ü–≤–µ—Ç –ø–æ–¥–ª–æ–∂–∫–∏ —Å–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
        )
        search_label.pack(side=tk.LEFT)

        # –§—Ä–µ–π–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç–æ–≤
        formats_frame = tk.Frame(header_frame)
        formats_frame.pack(side=tk.LEFT, padx=(10,500))

        # –ú–µ—Ç–∫–∞ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
        self.formats_text = tk.Text(
            formats_frame,
            height=2, # –≤—ã—Å–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
            width=55, # —à–∏—Ä–∏–Ω–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö.
            bg="#20B2AA", # —Ü–≤–µ—Ç –ø–æ–¥–ª–æ–∂–∫–∏ ¬´—Å–≤–µ—Ç–ª—ã–π –º–æ—Ä—Å–∫–æ–π –∑–µ–ª—ë–Ω—ã–π¬ª
            font=('Arial', 10),
            wrap=tk.WORD, # WORD –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ –ø–æ –±—É–∫–≤–∞–º.
            padx=10,
            pady=10,
            relief=tk.FLAT,
            bd=0,
            highlightthickness=0
        )
        #self.formats_text.pack()
        # –°–∫—Ä–æ–ª–ª –±–∞—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        scrollbar = ttk.Scrollbar(formats_frame, orient="vertical", command=self.formats_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.formats_text.config(yscrollcommand=scrollbar.set)
        self.formats_text.pack(fill=tk.BOTH, expand=True)


        self._update_formats_display()

        # Toolbar —Å –∫–Ω–æ–ø–∫–∞–º–∏
        toolbar = tk.Frame(self.root, padx=5, pady=5)
        toolbar.pack(fill=tk.X)
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–≤–∞
        scan_btn = tk.Button(toolbar, text="üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É", command=self._scan_folder,
                             bd=1, relief=tk.RIDGE, padx=10)
        scan_btn.pack(side=tk.LEFT, padx=5)
        # –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞
        right_frame = tk.Frame(toolbar)
        right_frame.pack(side=tk.RIGHT)
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        formats_btn = tk.Button(right_frame, text="‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã", command=self._select_formats,
                                bd=1, relief=tk.RAISED, padx=10)
        formats_btn.pack(side=tk.LEFT, padx=5)
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = tk.Button(right_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ DOCX", command=self._save_collection,
                             bd=1, relief=tk.RAISED, padx=10)
        save_btn.pack(side=tk.LEFT, padx=5)

        # Treeview
        tree_frame = tk.Frame(self.root)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        self.tree = ttk.Treeview(tree_frame, columns=("type", "name", "path", "size", "date"), show="headings")
        self.tree.tag_configure("folder", background="#f0f0f0", font=('Arial', 10, 'bold'))
        self.tree.tag_configure("file", background="white")

        # –°–∫—Ä–æ–ª–ª –±–∞—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ñ–∞–π–ª–∞–º–∏
        scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        scrollbar.pack(side=tk.LEFT, fill=tk.Y)
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.tree.pack(fill=tk.BOTH, expand=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫, anchor - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ—Ç - CENTER) n - –ø—Ä–∞–≤–æ, w - –ª–µ–≤–æ, n - –≤–µ
        self.tree.heading("type", text="–¢–∏–ø", anchor=tk.CENTER)
        self.tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.tree.heading("path", text="–ü—É—Ç—å")
        self.tree.heading("size", text="–†–∞–∑–º–µ—Ä", anchor=tk.W)
        self.tree.heading("date", text="–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", anchor=tk.W)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–ª–æ–Ω–æ–∫, width - —à–∏—Ä–∏–Ω–∞, tk.NO - –∑–∞–ø—Ä–µ—Ç —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è, anchor - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        self.tree.column("type", width=150, stretch=tk.YES)
        self.tree.column("name", width=220, stretch=tk.YES)
        self.tree.column("path", width=500, stretch=tk.YES)
        self.tree.column("size", width=50, stretch=tk.YES)
        self.tree.column("date", width=90, stretch=tk.YES)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º
        player_frame = tk.Frame(self.root, bg="#e0e0e0", padx=10, pady=8)
        player_frame.pack(fill=tk.X)
        # –ö–Ω–æ–ø–∫–∏ –ø–ª–µ–µ—Ä–∞
        player_buttons = [
            ("‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", lambda: self.player.play_selected(self.tree)),
            ("‚èè –í –ø–ª–µ–π–ª–∏—Å—Ç", lambda: self.player.add_to_playlist(self.tree)),
            ("‚èπ –°—Ç–æ–ø", self.player.stop_foobar)
        ]
        for text, cmd in player_buttons:
            btn = tk.Button(player_frame, text=text, command=cmd, bg="#f8f8f8", padx=10)
            btn.pack(side=tk.LEFT, padx=5)

        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_bar = tk.Label(player_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", bg="#e0e0e0",
                                   fg="#333333", anchor=tk.W)
        self.status_bar.pack(side=tk.LEFT, padx=10, expand=True, fill=tk.X)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏",
                                      command=lambda: self.player.play_selected(self.tree))
        self.context_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
                                      command=lambda: self.player.add_to_playlist(self.tree))
        self.context_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
                                      command=lambda: self._add_folder_to_playlist())
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ", command=self._open_in_explorer)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self._delete_item)

        # –ü—Ä–∏–≤—è–∑–∫–∏
        self.tree.bind("<Button-3>", self.show_context_menu)
        self.tree.bind("<Double-1>", lambda e: self.player.play_selected(self.tree))

    def _update_formats_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –∂–∏—Ä–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.formats_text.config(state=tk.NORMAL)
        self.formats_text.delete(1.0, tk.END)

        selected_formats = self.library.supported_formats
        if not selected_formats:
            self.formats_text.insert(tk.END, "–§–æ—Ä–º–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
            self.formats_text.config(state=tk.DISABLED)
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        format_groups = {
            '–ê—É–¥–∏–æ': [f for f in selected_formats if f in self.library.all_formats['–ê—É–¥–∏–æ']],
            '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': [f for f in selected_formats if f in self.library.all_formats['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è']],
            '–í–∏–¥–µ–æ': [f for f in selected_formats if f in self.library.all_formats['–í–∏–¥–µ–æ']],
            '–î–æ–∫—É–º–µ–Ω—Ç—ã': [f for f in selected_formats if f in self.library.all_formats['–î–æ–∫—É–º–µ–Ω—Ç—ã']],
            '–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ': [f for f in selected_formats if f in self.library.all_formats['–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ']],
            '–†–∞–∑–Ω—ã–µ': [f for f in selected_formats if f in self.library.all_formats['–†–∞–∑–Ω—ã–µ']]
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∂–∏—Ä–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        first_line = True
        for group, formats in format_groups.items():
            if formats:
                if not first_line:
                    self.formats_text.insert(tk.END, "\n")
                self.formats_text.insert(tk.END, group + ":   ", 'bold')
                self.formats_text.insert(tk.END, ', '.join(formats))
                first_line = False

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.formats_text.tag_config('bold', font=('Arial', 10, 'bold'))
        self.formats_text.config(state=tk.DISABLED)

    def _select_formats(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        self.library.show_format_selection(self.root)
        self._update_formats_display()

    def _treeview_sort_column(self, col, reverse):
        items = [(self.tree.set(k, col), k) for k in self.tree.get_children("")]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        items.sort(reverse=reverse)
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for index, (val, k) in enumerate(items):
            self.tree.move(k, "", index)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞
        self.tree.heading(col, command=lambda: self._treeview_sort_column(col, not reverse))

    def _scan_folder(self):
        folder_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        if folder_path:
            success, message = self.library.scan_folder(folder_path, parent=self.root)
            if success:
                self.update_tree_view(self.library.get_library())
                self.update_status(message, "green")
                self._update_formats_display()
            else:
                self.update_status(message, "red")
                if "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞" not in message:
                    messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", message)

    def _save_collection(self):
        success, result = self.library.save_to_docx()
        if success:
            self.update_status(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result}", "green")
        else:
            self.update_status(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result}", "red")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é:\n{result}")

    def _open_in_explorer(self):
        selected = self.tree.focus()
        if not selected:
            return

        item_data = self.tree.item(selected)
        if item_data["values"][0] == "file":
            path = os.path.dirname(item_data["values"][2])
        else:
            path = self._find_folder_path(selected)
        if path and os.path.exists(path):
            os.startfile(path)

    def _delete_item(self):
        selected_items = self.tree.selection()
        if not selected_items:
            return
        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å {len(selected_items)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?")
        if confirm:
            for item in selected_items:
                self._delete_item_recursive(item)
            self.update_tree_view(self.library.get_library())
            self.update_status(f"–£–¥–∞–ª–µ–Ω–æ {len(selected_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", "orange")

    def _delete_item_recursive(self, item):
        pass  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è

    def _find_folder_path(self, folder_item):
        # –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ
        item_data = self.tree.item(folder_item)
        if item_data["values"][0] == "file":
            return os.path.dirname(item_data["values"][2])

    def update_tree_view(self, library):
        self.tree.delete(*self.tree.get_children())
        self._build_tree_recursive("", library)

    def _build_tree_recursive(self, parent_id, node):
        for name, content in node.items():
            if name == "_files":
                for file_name, file_path, is_new in content:
                    try:
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
                        abs_path = os.path.abspath(file_path) if file_path else ""
                        abs_path = abs_path.replace('/', '\\')

                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                        file_stats = os.stat(abs_path)
                        size = f"{file_stats.st_size / 1048576:.1f} MB"
                        date = datetime.fromtimestamp(file_stats.st_mtime).strftime('%Y-%m-%d %H:%M')

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        tags = ("file",)
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ treeview
                        self.tree.insert(
                            parent_id,
                            "end",
                            text=file_name,
                            values=(
                                "file",  # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ treeview
                                file_name, # –ù–∞–∑–≤–∞–Ω–∏–µ
                                abs_path, # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                                size, # –†–∞–∑–º–µ—Ä
                                date, # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            ),
                            tags=tags
                        )

                    except (FileNotFoundError, PermissionError) as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
                        continue

            else: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫
                folder_id = self.tree.insert(
                    parent_id,
                    "end",
                    text=name,
                    values=(
                        name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
                        "", # –ü—É—Ç—å (–ø—É—Å—Ç–æ –¥–ª—è –ø–∞–ø–æ–∫)
                        "", # –†–∞–∑–º–µ—Ä (–ø—É—Å—Ç–æ)
                        "", # –î–∞—Ç–∞ (–ø—É—Å—Ç–æ)
                        "" # –°—Ç–∞—Ç—É—Å (–ø—É—Å—Ç–æ)
                    ),
                    tags=("folder",)
                )
                self._build_tree_recursive(folder_id, content)

    def show_context_menu(self, event):
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)

    def update_status(self, text, color="black"):
        self.status_bar.config(text=text, fg=color)

    def _add_folder_to_playlist(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
        selected = self.tree.selection()
        if not selected:
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        item_data = self.tree.item(selected[0])
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if item_data["values"][0] == "file":
            self.player.add_to_playlist(self.tree)
            return

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ - —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –Ω–µ–µ –∏ –ø–æ–¥–ø–∞–ø–æ–∫
        paths = []
        self._collect_files_from_tree(self.tree, selected[0], paths)

        if paths:
            success, message = self.player.add_to_playlist(paths=paths)
            self.update_status(message, "green" if success else "red")
        else:
            self.update_status("–í –ø–∞–ø–∫–µ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤", "red")

    def _collect_files_from_tree(self, tree, folder_item, paths):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –≤ –¥–µ—Ä–µ–≤–µ"""
        for child in tree.get_children(folder_item):
            child_data = tree.item(child)
            if child_data["values"][0] == "file":
                normalized_path = self.player._normalize_path(child_data["values"][2])
                if normalized_path and normalized_path.lower().endswith(self.player.supported_formats):
                    paths.append(normalized_path)
            elif child_data["values"][0] == "folder":
                self._collect_files_from_tree(tree, child, paths)

