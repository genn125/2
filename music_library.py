import os
from collections import defaultdict
from tkinter import filedialog
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.style import WD_STYLE_TYPE
from docx.oxml import OxmlElement
from docx.oxml.ns import qn

class MusicLibrary:
    def __init__(self):
        self.supported_formats = ('.mp3', '.wav', '.ogg', '.flac', '.m4a', '.aac', '.wma')
        self.music_library = defaultdict(lambda: defaultdict(dict))

    def scan_folder(self, folder_path, clear_existing=True):
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º—É–∑—ã–∫—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        :param folder_path: –ü—É—Ç—å –∫ —Å–∫–∞–Ω–∏—Ä—É–µ–º–æ–π –ø–∞–ø–∫–µ
        :param clear_existing: –ï—Å–ª–∏ True, –æ—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
        """
        if not folder_path:
            return False

        self.music_library.clear()
        self.music_library = defaultdict(lambda: defaultdict(dict))  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É

        self._scan_folder_recursive(folder_path, self.music_library)
        return True

    def _scan_folder_recursive(self, current_path, node):
        for entry in os.listdir(current_path):
            full_path = os.path.join(current_path, entry)

            if os.path.isdir(full_path):
                if entry not in node:
                    node[entry] = {}
                self._scan_folder_recursive(full_path, node[entry])
            elif entry.lower().endswith(self.supported_formats):
                if "_files" not in node:
                    node["_files"] = []
                node["_files"].append((entry, full_path))

    def get_library(self):
        return self.music_library

    def clear_library(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        self.music_library.clear()
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É defaultdict
        self.music_library = defaultdict(lambda: defaultdict(dict))

    # def save_to_docx(self, output_path=None):
    #     if not output_path:
    #         output_path = filedialog.asksaveasfilename(
    #             defaultextension=".docx",
    #             filetypes=[("Word Documents", "*.docx")],
    #             title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞–∫"
    #         )
    #         if not output_path:
    #             return False, ""
    #
    #     try:
    #         doc = Document()
    #         style = doc.styles['Normal']
    #         style.font.name = 'Arial'
    #         style.font.size = Pt(12)
    #
    #         # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    #         title = doc.add_heading('–ú–æ—è –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è', level=1)
    #         title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    #
    #         def add_items(node, level=1):
    #             for name, content in node.items():
    #                 if name == "_files":
    #                     for file_name, _ in content:
    #                         p = doc.add_paragraph('    ' * level + f"üéµ {file_name}")
    #                         p.runs[0].font.color.rgb = RGBColor(0, 0, 0)
    #                 else:
    #                     heading = doc.add_heading('    ' * (level - 1) + f"üìÅ {name}", level=min(level + 1, 6))
    #                     heading.runs[0].font.color.rgb = RGBColor(0, 0, 128)
    #                     add_items(content, level + 1)
    #
    #         add_items(self.music_library)
    #         doc.save(output_path)
    #         return True, output_path
    #
    #     except Exception as e:
    #         return False, str(e)

    def save_to_docx(self, output_path=None):
        if not output_path:
            output_path = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word Documents", "*.docx")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞–∫"
            )
            if not output_path:
                return False, ""

        try:
            doc = Document()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
            style = doc.styles['Normal']
            style.font.name = 'Arial'
            style.font.size = Pt(12)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–∞–ø–æ–∫
            if 'FolderStyle' not in doc.styles:
                folder_style = doc.styles.add_style('FolderStyle', WD_STYLE_TYPE.PARAGRAPH)
                folder_style.base_style = doc.styles['Heading 2']
                folder_style.font.color.rgb = RGBColor(0, 0, 128)
                folder_style.font.bold = True

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            title = doc.add_heading('–ú–æ—è –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è', level=1)
            title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            def add_items(node, level=1):
                for name, content in node.items():
                    if name == "_files":
                        continue

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å –ø–æ–ª–µ–º COLLAPSIBLE
                    para = doc.add_paragraph(style='FolderStyle')
                    run = para.add_run(f"üìÅ {name}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                    doc.paragraphs[-1]._element.append(
                        self._create_collapsible_field(f"folder_{name}"))

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã (–±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã –≤ —Å–≤—ë—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
                    if "_files" in node:
                        for file_name, _ in sorted(node["_files"], key=lambda x: x[0]):
                    file_para = doc.add_paragraph(f"    üéµ {file_name}", style='List Bullet')
                    file_para.paragraph_format.left_indent = Pt(level * 20)

                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
                    add_items(content, level + 1)

                    add_items(self.music_library)

                    # –í–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
                    doc.settings.update_fields_on_open = True
                    doc.save(output_path)

            return True, output_path

        except Exception as e:
            return False, str(e)

    def _create_collapsible_field(self, bookmark_name):
        """–°–æ–∑–¥–∞–µ—Ç XML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—è"""
        from docx.oxml import OxmlElement
        from docx.oxml.ns import qn

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è
        fld_char = OxmlElement('w:fldChar')
        fld_char.set(qn('w:fldCharType'), 'begin')

        instr_text = OxmlElement('w:instrText')
        instr_text.set(qn('xml:space'), 'preserve')
        instr_text.text = f' COLLAPSIBLE {{}} \\b "{bookmark_name}"'

        end_fld_char = OxmlElement('w:fldChar')
        end_fld_char.set(qn('w:fldCharType'), 'end')

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ
        r = OxmlElement('w:r')
        r.append(fld_char)
        r.append(instr_text)
        r.append(end_fld_char)

        return r