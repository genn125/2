import os
import subprocess
import tkinter as tk
from tkinter import filedialog, messagebox, ttk, simpledialog
from collections import defaultdict


class MusicCollectionApp:
    def __init__(self, root):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root = root
        self.root.title("–¢–≤–æ—è –ú—É–∑—ã–∫–∞")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.root.geometry("1000x700")  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        self.foobar_path = r"C:\Program Files (x86)\foobar2000\foobar2000.exe"  # –ü—É—Ç—å –∫ foobar2000
        self.supported_formats = ('.mp3', '.wav', '.ogg', '.flac', '.m4a', '.aac', '.wma')  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.music_library = defaultdict(lambda: defaultdict(dict))  # –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self._original_library = None  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._setup_ui()

    def _setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        header_frame = tk.Frame(self.root, bg="#f0f0f0", padx=10, pady=10)
        header_frame.pack(fill=tk.X)
        tk.Label(header_frame, text="–¢–í–û–Ø –ú–£–ó–´–ö–ê",
                 font=('Arial', 14, 'bold'), bg="#f0f0f0").pack(side=tk.LEFT)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = tk.Frame(self.root, padx=5, pady=5)
        toolbar.pack(fill=tk.X)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons = [
            ("üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É", self.scan_folder),
            ("üîç –ü–æ–∏—Å–∫", lambda: self.search_music(self.search_entry.get())),
            ("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫", self.reset_search)
        ]

        for text, cmd in buttons:
            btn = tk.Button(toolbar, text=text, command=cmd, bd=1, relief=tk.RIDGE, padx=10)
            btn.pack(side=tk.LEFT, padx=2)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_frame = tk.Frame(self.root, pady=5)
        search_frame.pack(fill=tk.X, padx=10)
        self.search_entry = tk.Entry(search_frame)
        self.search_entry.pack(fill=tk.X, padx=5, expand=True)
        self.search_entry.bind("<KeyRelease>", lambda e: self.search_music(self.search_entry.get()))

        # –î–µ—Ä–µ–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        tree_frame = tk.Frame(self.root)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        self.tree = ttk.Treeview(tree_frame, columns=("type", "path"), show="tree", selectmode="extended")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–µ—Ä–µ–≤–∞
        self.tree.tag_configure("folder", background="#f0f0f0", font=('Arial', 10, 'bold'))
        self.tree.tag_configure("file", background="white")

        # Scrollbar –¥–ª—è –¥–µ—Ä–µ–≤–∞
        scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.tree.pack(fill=tk.BOTH, expand=True)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–µ—Ä–æ–º
        player_frame = tk.Frame(self.root, bg="#e0e0e0", padx=10, pady=8)
        player_frame.pack(fill=tk.X)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–µ—Ä–æ–º
        player_controls = [
            ("‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", self.play_selected),
            ("‚èè –í –ø–ª–µ–π–ª–∏—Å—Ç", self.add_to_playlist),
            ("‚èπ –°—Ç–æ–ø", self.stop_foobar)
        ]

        for text, cmd in player_controls:
            btn = tk.Button(player_frame, text=text, command=cmd, bg="#f8f8f8", padx=10)
            btn.pack(side=tk.LEFT, padx=5)

        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_bar = tk.Label(player_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                                   bg="#e0e0e0", fg="#333333", anchor=tk.W)
        self.status_bar.pack(side=tk.LEFT, padx=10, expand=True, fill=tk.X)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", command=self.play_selected)
        self.context_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç", command=self.add_to_playlist)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ", command=self.open_in_explorer)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_item)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind("<Button-3>", self.show_context_menu)
        self.tree.bind("<Double-1>", self.play_selected)

    def scan_folder(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        folder_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –º—É–∑—ã–∫–æ–π")
        if not folder_path:
            return

        self.status_bar.config(text=f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {folder_path}", fg="blue")
        self.root.update()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            if not hasattr(self, '_original_library'):
                self._original_library = defaultdict(lambda: defaultdict(dict))

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._scan_folder_recursive(folder_path, self.music_library)
            self._original_library = self.music_library.copy()
            self.update_tree_view()
            self.status_bar.config(text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {folder_path}", fg="green")
        except Exception as e:
            self.status_bar.config(text=f"–û—à–∏–±–∫–∞: {str(e)}", fg="red")

    def _scan_folder_recursive(self, current_path, node):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫"""
        for entry in os.listdir(current_path):
            full_path = os.path.join(current_path, entry)

            if os.path.isdir(full_path):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∞–ø–∫–∏
                if entry not in node:
                    node[entry] = {}
                self._scan_folder_recursive(full_path, node[entry])
            elif entry.lower().endswith(self.supported_formats):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                if "_files" not in node:
                    node["_files"] = []
                node["_files"].append((entry, full_path))

    def update_tree_view(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        self.tree.delete(*self.tree.get_children())  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        self._build_tree_recursive("", self.music_library)

    def _build_tree_recursive(self, parent_id, node):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–µ—Ä–µ–≤–∞"""
        for name, content in node.items():
            if name == "_files":
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                for file_name, file_path in content:
                    self.tree.insert(
                        parent_id, "end",
                        text=file_name,
                        values=("file", file_path),
                        tags=("file",)
                    )
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏
                folder_id = self.tree.insert(
                    parent_id, "end",
                    text=name,
                    values=("folder", ""),
                    tags=("folder",)
                )
                self._build_tree_recursive(folder_id, content)

    def search_music(self, query):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        query = query.lower().strip()

        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∏—Å–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        if not hasattr(self, '_original_library'):
            self._original_library = self.music_library.copy()

        if not query:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            self.music_library = self._original_library.copy()
            self.update_tree_view()
            return

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é
        filtered_library = defaultdict(lambda: defaultdict(dict))

        for artist, years in self._original_library.items():
            artist_matches = query in artist.lower()

            for year, albums in years.items():
                for album_name, songs in albums.items():
                    album_matches = (query in album_name.lower()) or artist_matches
                    filtered_songs = [
                        (song, path) for song, path in songs
                        if (query in song.lower()) or album_matches
                    ]

                    if filtered_songs:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
                        if artist not in filtered_library:
                            filtered_library[artist] = {}
                        if year not in filtered_library[artist]:
                            filtered_library[artist][year] = {}
                        filtered_library[artist][year][album_name] = filtered_songs

        self.music_library = filtered_library
        self.update_tree_view()
        self.status_bar.config(text=f"–ù–∞–π–¥–µ–Ω–æ: {query}", fg="blue")

    def _search_item(self, item, query):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        item_text = self.tree.item(item, "text").lower()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        if query in item_text:
            self.tree.item(item, open=True)
            self._highlight_parents(item)
        else:
            self._hide_item_if_no_matches(item, query)

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for child in self.tree.get_children(item):
            self._search_item(child, query)

    def reset_search(self):
        """–°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        self.search_entry.delete(0, tk.END)  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_music("")  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        self.status_bar.config(text="–ü–æ–∏—Å–∫ —Å–±—Ä–æ—à–µ–Ω. –ü–æ–∫–∞–∑–∞–Ω–∞ –≤—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", fg="green")

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã: play_selected, add_to_playlist –∏ —Ç.–¥. –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    def _highlight_parents(self, item):
        """–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–ø–æ–∫ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        parent = self.tree.parent(item)
        while parent:
            self.tree.item(parent, open=True)
            parent = self.tree.parent(parent)

    def _hide_item_if_no_matches(self, item, query):
        """–°–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É"""
        has_visible_children = any(
            query in self.tree.item(child, "text").lower()
            for child in self.tree.get_children(item)
        )

        if not has_visible_children and query not in self.tree.item(item, "text").lower():
            self.tree.detach(item)

    def _reset_item_visibility(self, item):
        """–°–±—Ä–æ—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        self.tree.reattach(item, self.tree.parent(item), "end")
        for child in self.tree.get_children(item):
            self._reset_item_visibility(child)

    def play_selected(self, event=None):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        selected_items = self.tree.selection()
        if not selected_items:
            return

        paths = []
        names = []

        for item in selected_items:
            item_data = self.tree.item(item)
            if item_data["values"][0] == "file":
                paths.append(item_data["values"][1])
                names.append(item_data["text"])
            elif item_data["values"][0] == "folder":
                self._collect_files_from_folder(item, paths, names)

        if paths:
            self._play_in_foobar(paths, " | ".join(names))

    def _collect_files_from_folder(self, folder_item, paths, names):
        """–°–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏"""
        for child in self.tree.get_children(folder_item):
            child_data = self.tree.item(child)
            if child_data["values"][0] == "file":
                paths.append(child_data["values"][1])
                names.append(child_data["text"])
            elif child_data["values"][0] == "folder":
                self._collect_files_from_folder(child, paths, names)

    def _play_in_foobar(self, file_paths, display_name):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ foobar2000"""
        try:
            subprocess.Popen([self.foobar_path, "/play"] + file_paths)
            self.status_bar.config(text=f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {display_name[:50]}...", fg="blue")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å foobar2000:\n{str(e)}")

    def add_to_playlist(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç foobar2000"""
        selected_items = self.tree.selection()
        if not selected_items:
            return

        paths = []
        for item in selected_items:
            item_data = self.tree.item(item)
            if item_data["values"][0] == "file":
                paths.append(item_data["values"][1])
            elif item_data["values"][0] == "folder":
                self._collect_files_from_folder(item, paths, [])

        if paths:
            try:
                subprocess.Popen([self.foobar_path, "/add"] + paths)
                self.status_bar.config(text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(paths)} —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç", fg="green")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç:\n{str(e)}")

    def stop_foobar(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            subprocess.Popen([self.foobar_path, "/stop"])
            self.status_bar.config(text="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg="black")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å foobar2000:\n{str(e)}")

    def open_in_explorer(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
        selected = self.tree.focus()
        if not selected:
            return

        item_data = self.tree.item(selected)
        if item_data["values"][0] == "file":
            path = os.path.dirname(item_data["values"][1])
        else:
            path = self._find_folder_path(selected)

        if path and os.path.exists(path):
            os.startfile(path)

    def _find_folder_path(self, folder_item):
        """–ü–æ–∏—Å–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –≤ –¥–µ—Ä–µ–≤–µ"""
        parts = []
        current_item = folder_item

        while current_item:
            item_data = self.tree.item(current_item)
            parts.insert(0, item_data["text"])
            current_item = self.tree.parent(current_item)

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å
        test_path = os.path.join(*parts)
        if os.path.exists(test_path):
            return test_path

        return None

    def delete_item(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        selected_items = self.tree.selection()
        if not selected_items:
            return

        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å {len(selected_items)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?"
        )
        if not confirm:
            return

        for item in selected_items:
            self._delete_item_recursive(item)

        self.update_tree_view()
        self.status_bar.config(text=f"–£–¥–∞–ª–µ–Ω–æ {len(selected_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", fg="orange")

    def _delete_item_recursive(self, item):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        parent = self.tree.parent(item)
        if not parent:  # –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
            return

        item_data = self.tree.item(item)
        parent_data = self.tree.item(parent)

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if parent == "":  # –í–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            if item_data["text"] in self.music_library:
                del self.music_library[item_data["text"]]
        else:
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É–∑–µ–ª –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            current_node = self.music_library
            path = []

            # –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            current_item = item
            while current_item and current_item != "":
                path.insert(0, self.tree.item(current_item, "text"))
                current_item = self.tree.parent(current_item)

            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª
            for step in path[:-1]:
                if step in current_node:
                    current_node = current_node[step]
                else:
                    return

            # –£–¥–∞–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª
            if path[-1] in current_node:
                del current_node[path[-1]]

    def clear_library(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é?"):
            self.music_library.clear()
            self.update_tree_view()
            self.status_bar.config(text="–ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞", fg="red")

    def show_context_menu(self, event):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)







if __name__ == "__main__":
    root = tk.Tk()
    app = MusicCollectionApp(root)
    root.mainloop()